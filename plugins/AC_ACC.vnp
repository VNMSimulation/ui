#struct provided in https://www.assettocorsa.net/forum/index.php?threads/acc-shared-memory-documentation.59965/
from dataclasses import dataclass
from ctypes import Structure, sizeof, c_float, c_int32, c_byte, c_int, c_wchar, c_int16, c_uint16, c_int8, c_uint8
import mmap
import math
import struct
import operator

class Car():
    def __init__(self, carModel, brakeBiasOffset, maxSteerAngle):
        self.carModel = carModel
        self.brakeBiasOffset = brakeBiasOffset
        self.maxSteerAngle = maxSteerAngle

carList = []
carList.append(Car("amr_v12_vantage_gt3",-7, 320))
carList.append(Car("audi_r8_lms",-14, 360))
carList.append(Car("bentley_continental_gt3_2016",-7, 320))
carList.append(Car("bentley_continental_gt3_2018",-7, 320))
carList.append(Car("bmw_m6_gt3",-15, 283))
carList.append(Car("jaguar_g3",-7, 360))
carList.append(Car("ferrari_488_gt3",-17, 240))
carList.append(Car("honda_nsx_gt3",-14, 310))
carList.append(Car("lamborghini_gallardo_rex",-14, 360))
carList.append(Car("lamborghini_huracan_gt3",-14, 310))
carList.append(Car("lamborghini_huracan_st",-14, 310))
carList.append(Car("lexus_rc_f_gt3",-14, 320))
carList.append(Car("mclaren_650s_gt3",-17, 240))
carList.append(Car("mercedes_amg_gt3",-14, 320))
carList.append(Car("nissan_gt_r_gt3_2017",-15, 320))
carList.append(Car("nissan_gt_r_gt3_2018",-15, 320))
carList.append(Car("porsche_991_gt3_r",-21, 400))
carList.append(Car("porsche_991ii_gt3_cup",-15, 400))
carList.append(Car("amr_v8_vantage_gt3",-7, 320))
carList.append(Car("audi_r8_lms_evo",-14, 360))
carList.append(Car("honda_nsx_gt3_evo",-14, 310))
carList.append(Car("lamborghini_huracan_gt3_evo",-14, 310))
carList.append(Car("mclaren_720s_gt3",-17, 240))
carList.append(Car("porsche_991ii_gt3_r",-21, 400))
carList.append(Car("alpine_a110_gt4",-15, 360))
carList.append(Car("amr_v8_vantage_gt4",-20, 320))
carList.append(Car("amr_v8_vantage_gt4",-20, 320))
carList.append(Car("amr_v8_vantage_gt4",-20, 320))
carList.append(Car("chevrolet_camaro_gt4r",-18, 360))
carList.append(Car("ginetta_g55_gt4",-18, 360))
carList.append(Car("ktm_xbow_gt4",-20, 290))
carList.append(Car("maserati_mc_gt4",-15, 450))
carList.append(Car("mclaren_570s_gt4",-9, 240))
carList.append(Car("mercedes_amg_gt4",-20, 246))
carList.append(Car("porsche_718_cayman_gt4_mr",-20, 400))

class Uint8Descriptor(object):
    def __init__(self, number=None):
        self.number = number

    def __get__(self, obj, objtype):
        return self.number

    def __set__(self, obj, number):
        if number > 255:
            self.number = 255
        elif number < 0:
            self.number = 0
        else:
            self.number = number

class Int8Descriptor(object):
    def __init__(self, number=None):
        self.number = number

    def __get__(self, obj, objtype):
        return self.number

    def __set__(self, obj, number):
        if number > 127:
            self.number = 127
        elif number <= -128:
            self.number = -128
        else:
            self.number = number

class Uint16Descriptor(object):
    def __init__(self, number=None):
        self.number = number

    def __get__(self, obj, objtype):
        return self.number

    def __set__(self, obj, number):
        if number > 65535:
            self.number = 65535
        elif number <= 0:
            self.number = 0
        else:
            self.number = number

class Int16Descriptor(object):
    def __init__(self, number=None):
        self.number = number

    def __get__(self, obj, objtype):
        return self.number

    def __set__(self, obj, number):
        if number > 32767:
            self.number = 32767
        elif number <= -32768:
            self.number = -32768
        else:
            self.number = number

@dataclass
class TelemetryFFBReport:
    reportID = Uint8Descriptor()
    telemetryReportId = Uint8Descriptor()
    vnmSteeringAngle = Int16Descriptor()
    vnmMaxSteeringAngle = Uint16Descriptor()
    vnmFinalFFB = Int16Descriptor()
    vnmThrottle = Uint16Descriptor()
    vnmBrake = Uint16Descriptor()
    vnmClutch = Uint16Descriptor()
    vnmGear = Uint8Descriptor()
    vnmRpm = Uint16Descriptor()
    vnmRpmMax = Uint16Descriptor()
    vnmSpeedKmh = Uint16Descriptor()
    vnmBrakeBias = Uint16Descriptor()
    vnmTC = Uint8Descriptor()
    vnmTCCut = Uint8Descriptor()
    vnmABS = Uint8Descriptor()
    VnmTCinAction = Uint8Descriptor()
    VnmABSinAction = Uint8Descriptor()
    VnmEngineMap = Uint8Descriptor()
    vnmTurboBoost = Uint8Descriptor()
    vnmPitLimiterOn = Uint8Descriptor()
    vnmIgnitionOn = Uint8Descriptor()
    vnmStarterEngineOn = Uint8Descriptor()
    vnmIsEngineRunning = Uint8Descriptor()
    vnmKerbVibration = Int16Descriptor()
    vnmSlipVibrations = Int16Descriptor()
    vnmGVibrations = Int16Descriptor()
    vnmAbsVibrations = Int16Descriptor()
    vnmFuel = Uint16Descriptor()
    vnmFuelMax = Uint16Descriptor()
    vnmFuelXLap = Uint16Descriptor()
    vnmFuelEstimatedLaps = Uint16Descriptor()
    def __init__(self, reportID: c_byte, telemetryReportId: c_byte, vnmSteeringAngle: c_int16, vnmMaxSteeringAngle: c_uint16, vnmFinalFFB: c_int16, vnmThrottle: c_uint16, vnmBrake: c_uint16, vnmClutch: c_uint16, vnmGear: c_uint8, vnmRpm: c_uint16, vnmRpmMax: c_uint16, vnmSpeedKmh: c_uint16, vnmBrakeBias: c_uint16, vnmTC: c_uint8, vnmTCCut: c_uint8, vnmABS: c_uint8, VnmTCinAction: c_uint8, VnmABSinAction: c_uint8, VnmEngineMap: c_uint8, vnmTurboBoost: c_uint8, vnmPitLimiterOn: c_uint8, vnmIgnitionOn: c_uint8, vnmStarterEngineOn: c_uint8, vnmIsEngineRunning: c_uint8, vnmKerbVibration: c_int16, vnmSlipVibrations: c_int16, vnmGVibrations: c_int16, vnmAbsVibrations: c_int16, vnmFuel: c_uint16, vnmFuelMax: c_uint16, vnmFuelXLap: c_uint16, vnmFuelEstimatedLaps: c_uint16):
        self.reportID = reportID
        self.telemetryReportId = telemetryReportId
        self.vnmSteeringAngle = vnmSteeringAngle
        self.vnmMaxSteeringAngle = vnmMaxSteeringAngle
        self.vnmFinalFFB = vnmFinalFFB
        self.vnmThrottle = vnmThrottle
        self.vnmBrake = vnmBrake
        self.vnmClutch = vnmClutch
        self.vnmGear = vnmGear
        self.vnmRpm = vnmRpm
        self.vnmRpmMax = vnmRpmMax
        self.vnmSpeedKmh = vnmSpeedKmh
        self.vnmBrakeBias = vnmBrakeBias
        self.vnmTC = vnmTC
        self.vnmTCCut = vnmTCCut
        self.vnmABS = vnmABS
        self.VnmTCinAction = VnmTCinAction
        self.VnmABSinAction = VnmABSinAction
        self.VnmEngineMap = VnmEngineMap
        self.vnmTurboBoost = vnmTurboBoost
        self.vnmPitLimiterOn = vnmPitLimiterOn
        self.vnmIgnitionOn = vnmIgnitionOn
        self.vnmStarterEngineOn = vnmStarterEngineOn
        self.vnmIsEngineRunning = vnmIsEngineRunning
        self.vnmKerbVibration = vnmKerbVibration
        self.vnmSlipVibrations = vnmSlipVibrations
        self.vnmGVibrations = vnmGVibrations
        self.vnmAbsVibrations = vnmAbsVibrations
        self.vnmFuel = vnmFuel
        self.vnmFuelMax = vnmFuelMax
        self.vnmFuelXLap = vnmFuelXLap
        self.vnmFuelEstimatedLaps = vnmFuelEstimatedLaps
    def to_bytes(self):
        # Define the format specifiers for struct.pack
        format_string = '<BBhHhHHHBHHHHBBBBBBBBBBBhhhhHHHH'  # Assuming two integer values in this example
        # Pack the values into a bytearray
        packed_data = struct.pack(format_string, self.reportID, self.telemetryReportId, self.vnmSteeringAngle, self.vnmMaxSteeringAngle, self.vnmFinalFFB, self.vnmThrottle, self.vnmBrake, self.vnmClutch, self.vnmGear, self.vnmRpm, self.vnmRpmMax, self.vnmSpeedKmh, self.vnmBrakeBias, self.vnmTC, self.vnmTCCut, self.vnmABS, self.VnmTCinAction, self.VnmABSinAction, self.VnmEngineMap, self.vnmTurboBoost, self.vnmPitLimiterOn, self.vnmIgnitionOn, self.vnmStarterEngineOn, self.vnmIsEngineRunning, self.vnmKerbVibration, self.vnmSlipVibrations, self.vnmGVibrations, self.vnmAbsVibrations, self.vnmFuel, self.vnmFuelMax, self.vnmFuelXLap, self.vnmFuelEstimatedLaps)
        return bytearray(packed_data)


ffbReport = TelemetryFFBReport(26, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

class Test(Structure):
    _fields_ = [
        ("ReportID", c_byte),
        ("GameID", c_byte),
        ("FinalFFB", c_float),
        ("Fuel", c_float),
        ("MaxFuel", c_float),
        ("Gear", c_byte),
        ("Clutch", c_float),
        ("RPM", c_float),
        ("MaxRPM", c_float),
        ("MaxRPM", c_float),
        ("SpeedKmh", c_float),
        ("TC", c_float),
        ("abs", c_float),
        ("BrakeBias", c_float),
        ("PitLimiterOn", c_byte),
        ("IsInPitLane", c_byte),
    ]

class SPageFileStatic2(Structure):
    _fields_ = [
        ("smVersion", c_wchar * 15),
        ("acVersion", c_wchar * 15),
        ("numberOfSessions", c_int),
        ("numCars", c_int),
        ("carModel", c_wchar * 33),
        ("track", c_wchar * 33),
        ("playerName", c_wchar * 33),
        ("playerSurname", c_wchar * 33),
        ("playerNick", c_wchar * 33),
    ]

class SPageFileStatic(Structure):
    _fields_ = [
        ("smVersion", c_wchar * 15),
        ("acVersion", c_wchar * 15),
        ("numberOfSessions", c_int),
        ("numCars", c_int),
        ("carModel", c_wchar * 33),
        ("track", c_wchar * 33),
        ("playerName", c_wchar * 33),
        ("playerSurname", c_wchar * 33),
        ("playerNick", c_wchar * 33),
        ("sectorCount", c_int),
        ("maxTorque", c_float),
        ("maxPower", c_float),
        ("maxRpm", c_int),
        ("maxFuel", c_float),
        ("suspensionMaxTravel", c_float * 4),
        ("tyreRadius", c_float * 4),
        ("maxTurboBoost", c_float),
        ("deprecated_1", c_float),
        ("deprecated_2", c_float),
        ("penaltiesEnabled", c_int),
        ("aidFuelRate", c_float),
        ("aidTireRate", c_float),
        ("aidMechanicalDamage", c_float),
        ("aidAllowTyreBlankets", c_int),
        ("aidStability", c_float),
        ("aidAutoClutch", c_int),
        ("aidAutoBlip", c_int),
        ("hasDRS", c_int),
        ("hasERS", c_int),
        ("hasKERS", c_int),
        ("kersMaxJ", c_float),
        ("engineBrakeSettingsCount", c_int),
        ("ersPowerControllerCount", c_int),
        ("trackSPlineLength", c_float),
        ("trackConfiguration", c_wchar * 33),
        ("ersMaxJ", c_float),
        ("isTimedRace", c_int),
        ("hasExtraLap", c_int),
        ("carSkin", c_wchar * 33),
        ("reversedGridPositions", c_int),
        ("PitWindowStart", c_int),
        ("PitWindowEnd", c_int),
        ("isOnline", c_int),
    ]


    def update(self):
            Report.Value['MaxFuel']=self.maxFuel
            Report.Value['MaxRPM']=self.maxRpm

class SPageFileGraphic(Structure):
    _fields_ = [
        ("packetId", c_int),
        ("AC_STATUS", c_int),
        ("AC_SESSION_TYPE", c_int),
        ("currentTime", c_wchar * 15),
        ("lastTime", c_wchar * 15),
        ("bestTime", c_wchar * 15),
        ("split", c_wchar * 15),
        ("completedLaps", c_int),
        ("position", c_int),
        ("iCurrentTime", c_int),
        ("iLastTime", c_int),
        ("iBestTime", c_int),
        ("sessionTimeLeft", c_float),
        ("distanceTraveled", c_float),
        ("isInPit", c_int),
        ("currentSectorIndex", c_int),
        ("lastSectorTime", c_int),
        ("numberOfLaps", c_int),
        ("tyreCompound", c_wchar * 33),
        ("replayTimeMultiplier", c_float),
        ("normalizedCarPosition", c_float),
        ("activeCars", c_int),
        ("carCoordinates", c_float * 60 * 3),
        ("carID", c_int * 60),
        ("playerCarID", c_int),
        ("penaltyTime", c_float),
        ("flag", c_int),
        ("penalty", c_int),
        ("idealLineOn", c_int),
        ("isInPitLane", c_int),
        ("surfaceGrip", c_float),
        ("mandatoryPitDone", c_int),
        ("windSpeed", c_float),
        ("windDirection", c_float),
        ("isSetupMenuVisible", c_int),
        ("mainDisplayIndex", c_int),
        ("secondaryDisplayIndex", c_int),
        ("TC", c_int),
        ("TCCut", c_int),
        ("EngineMap", c_int),
        ("ABS", c_int),
        ("fuelXLap", c_float),
        ("rainLights", c_int),
        ("flashingLights", c_int),
        ("lightsStage", c_int),
        ("exhaustTemperature", c_float),
        ("wiperLV", c_int),
        ("DriverStintTotalTimeLeft", c_int),
        ("DriverStintTimeLeft", c_int),
        ("rainTypes", c_int),
        ("sessionIndex", c_int),
        ("usedFuel", c_float),
        ("deltaLapTime", c_wchar * 15),
        ("iDeltaLapTime", c_int),
        ("estimatedLapTime", c_wchar * 15),
        ("iEstimatedLapTime", c_int),
        ("isDeltaPositive", c_int),
        ("iSplit", c_int),
        ("isValidLap", c_int),
        ("fuelEstimatedLaps", c_float),
        ("trackStatus", c_wchar * 33),
        ("missingMandatoryPits", c_int),
        ("directionLightsLeft", c_int),
        ("directionLightsRight", c_int),
    ]

    def update(self):
        #update Report here
        Report.Value['TC']=self.TC
        Report.Value['abs']=self.ABS


class SPageFilePhysics(Structure):
    _fields_ = [
        ("packetId", c_int),
        ("gas", c_float),
        ("brake", c_float),
        ("fuel", c_float),
        ("gear", c_int),                                                        # N = 1
        ("rpm", c_int),
        ("steerAngle", c_float),
        ("speedKmh", c_float),
        ("velocity", c_float * 3),
        ("accG", c_float * 3),
        ("wheelSlip", c_float * 4),
        ("wheelLoad", c_float * 4),
        ("wheelsPressure", c_float * 4),
        ("wheelAngularSpeed", c_float * 4),
        ("tyreWear", c_float * 4),
        ("tyreDirtyLevel", c_float * 4),
        ("tyreCoreTemperature", c_float * 4),
        ("camberRAD", c_float * 4),
        ("suspensionTravel", c_float * 4),
        ("drs", c_float),
        ("tc", c_float),
        ("heading", c_float),
        ("pitch", c_float),
        ("roll", c_float),
        ("cgHeight", c_float),
        ("carDamage", c_float * 5),
        ("numberOfTyresOut", c_int),
        ("pitLimiterOn", c_int),
        ("abs", c_float),
        ("kersCharge", c_float),
        ("kersInput", c_float),
        ("autoShifterOn", c_int),
        ("rideHeight", c_float * 2),
        ("turboBoost", c_float),
        ("ballast", c_float),
        ("airDensity", c_float),
        ("airTemp", c_float),
        ("roadTemp", c_float),
        ("localAngularVel", c_float * 3),
        ("finalFFB", c_float),
        ("performanceMeter", c_float),
        ("engineBrake", c_int),
        ("ersRecoveryLevel", c_int),
        ("ersPowerLevel", c_int),
        ("ersHeatCharging", c_int),
        ("ersIsCharging", c_int),
        ("kersCurrentKJ", c_float),
        ("drsAvailable", c_int),
        ("drsEnabled", c_int),
        ("brakeTemp", c_float * 4),
        ("clutch", c_float),
        ("tyreTempI", c_float * 4),
        ("tyreTempM", c_float * 4),
        ("tyreTempO", c_float * 4),
        ("isAIControlled", c_int),
        ("tyreContactPoint", c_float * 4 * 3),
        ("tyreContactNormal", c_float * 4 * 3),
        ("tyreContactHeading", c_float * 4 * 3),
        ("brakeBias", c_float),
        ("localVelocity", c_float * 3),
        ("P2PActivations", c_int),
        ("P2PStatus", c_int),
        ("currentMaxRpm", c_int),
        ("mz", c_float * 4),
        ("fx", c_float * 4),
        ("fy", c_float * 4),
        ("slipRatio", c_float * 4),
        ("slipAngle", c_float * 4),
        ("tcinAction", c_int),
        ("absInAction", c_int),
        ("suspensionDamage", c_float * 4),
        ("tyreTemp", c_float * 4),
        ("waterTemp", c_float),
        ("brakePressure", c_float * 4),
        ("frontBrakeCompound", c_int),
        ("rearBrakeCompound", c_int),
        ("padLife", c_float * 4),
        ("discLife", c_float * 4),
        ("ignitionOn", c_int),
        ("starterEngineOn", c_int),
        ("isEngineRunning", c_int),
        ("kerbVibration", c_float),
        ("slipVibrations", c_float),
        ("gVibrations", c_float),
        ("absVibrations", c_float),
    ]

    def update(self):
        Report.Value['Fuel']=self.fuel
        Report.Value['BrakeBias']=self.brakeBias
        Report.Value['Gear']=self.gear - 1
        Report.Value['FinalFFB']=self.finalFFB
        Report.Value['RPM']=self.rpm
        Report.Value['SpeedKmh']=self.speedKmh


def read_physics():
    buf = mmap.mmap(-1, sizeof(SPageFilePhysics), u"Local\\acpmf_physics")
    data = SPageFilePhysics.from_buffer(buf)
    ffbReport.vnmSteeringAngle = round(data.steerAngle*10000)
    ffbReport.vnmFinalFFB =  round(data.finalFFB*10000)
    ffbReport.vnmThrottle =  round(data.gas*10000)
    ffbReport.vnmBrake =  round(data.brake*10000)
    ffbReport.vnmClutch =  round(data.clutch*10000)
    ffbReport.vnmGear = data.gear
    if data.rpm > 0:
        ffbReport.vnmRpm = data.rpm
    ffbReport.vnmSpeedKmh = round(data.speedKmh)
    ffbReport.vnmBrakeBias = round(data.brakeBias*10000)
    ffbReport.VnmTCinAction = round(data.tc)
    ffbReport.VnmABSinAction = round(data.abs)
    ffbReport.vnmTurboBoost = round(data.turboBoost*10000)
    ffbReport.vnmPitLimiterOn = data.pitLimiterOn
    ffbReport.vnmIgnitionOn = data.ignitionOn
    ffbReport.vnmStarterEngineOn = data.starterEngineOn
    ffbReport.vnmIsEngineRunning = data.isEngineRunning
    ffbReport.vnmKerbVibration = round(data.kerbVibration*10000)
    ffbReport.vnmSlipVibrations = round(data.slipVibrations*10000)
    ffbReport.vnmGVibrations = round(data.gVibrations*10000)
    ffbReport.vnmAbsVibrations = round(data.absVibrations*10000)
    ffbReport.vnmFuel = round(data.fuel*100)
    data.update()

def read_static():
    buf = mmap.mmap(-1, sizeof(SPageFileStatic), u"Local\\acpmf_static")
    data = SPageFileStatic.from_buffer(buf)
    ffbReport.vnmRpmMax = data.maxRpm
    ffbReport.vnmFuelMax = round(data.maxFuel*100)
    for car in carList:
        if car.carModel == data.carModel:
            ffbReport.vnmBrakeBias = ffbReport.vnmBrakeBias + car.brakeBiasOffset*100
            if ffbReport.vnmBrakeBias < 0:
                ffbReport.vnmBrakeBias = 0
            ffbReport.vnmMaxSteeringAngle = car.maxSteerAngle
    data.update()

def read_graphics():
    buf = mmap.mmap(-1, sizeof(SPageFileGraphic), u"Local\\acpmf_graphics")
    data = SPageFileGraphic.from_buffer(buf)
    ffbReport.vnmTC = data.TC
    ffbReport.vnmTCCut = data.TCCut
    ffbReport.vnmABS = data.ABS
    ffbReport.VnmEngineMap = data.EngineMap
    ffbReport.vnmFuelXLap = round(data.fuelXLap*100)
    ffbReport.vnmFuelEstimatedLaps = round(data.fuelEstimatedLaps*100)
    data.update()



def send_data():
    Report.Value['SendMode'] = 1
    Report.Value['RAW'] = ffbReport.to_bytes()

class PluginInfo:
   Name='AC/ACC'
   PluginType='telemetry'
   Author='hoantv'
   Description='Plugin for AC/ACC'
   Version='1.0'